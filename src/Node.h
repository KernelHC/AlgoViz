/**
 * This code represents a node in a graph. Each node has a position, a name, and can be
 * connected to other nodes through edges.
 *
 * This code uses std::shared_ptr to manage dynamically allocated objects.
 * std::shared_ptr provides automatic memory management by keeping track of the number
 * of shared pointers that point to the object. When there are no more shared pointers
 * pointing to the object, it is automatically deleted.
 *
 * This code uses sf::CircleShape to represent a node in order to provide a simple and flexible
 * way to display nodes in a graphical user interface.
 */




#ifndef ALGOVIZ_NODE_H
#define ALGOVIZ_NODE_H

#include "SFML/Graphics.hpp"
#include <string>
#include <memory>

#define START_NODE_COLOR        (sf::Color::Cyan)
#define CURRENT_NODE_COLOR      (sf::Color::Yellow)
#define UNDISCOVERED_NODE_COLOR (sf::Color::White)
#define DISCOVERED_NODE_COLOR   (sf::Color::Red)
#define DONE_NODE_COLOR         (sf::Color::Blue)
#define TARGET_NODE_COLOR       (sf::Color::Green)
#define NEAREST_NODE_COLOR      (sf::Color::Magenta)
#define NODE_OUTLINE_COLOR      (sf::Color::Yellow)


enum NodeState
{
    NODE_CURRENT,
    NODE_START,
    NODE_TARGET,
    NODE_NEAREST,
    NODE_UNDISCOVERED,
    NODE_DISCOVERED,
    NODE_DONE
};

class Node {
private:
    std::string name;
    sf::CircleShape shape;
    sf::Font* font;
    NodeState state = NODE_UNDISCOVERED;
    std::shared_ptr<Node> parent_node = nullptr;
    bool is_toggled = false;
    int distance = INT_MAX;
    int path_weight = INT_MAX;

public:

    /** Constructor function that initializes a new Node object with a specified name,
     * position (x and y coordinates), and font to use for rendering text.
     *
     * @param name The name of the new Node object.
     * @param pos_x The x-coordinate of the new Node object's position.
     * @param pos_y The y-coordinate of the new Node object's position.
     * @param text_font A pointer to the SFML font object to use for rendering text.
     */
    Node(std::string name, float pos_x, float pos_y, sf::Font* text_font);


    /** Renders the Node object on the specified SFML render window and displays the
     * provided string value.
     *
     * @param window The SFML render window on which to render the Node object.
     * @param to_print The string value to display on the Node object.
     */
    void render(sf::RenderWindow& window, const std::string& to_print);


    /** Checks whether the current Node object collides with the other specified Node object.
     *
     * Used to guarantee that nodes are properly spaced apart.
     *
     * @param node A shared pointer to the Node object to check for collision with the current Node object.
     * @return True if the two Node objects collide, false otherwise.
     */
    bool checkBoundsCollision(const std::shared_ptr<Node>& node) const;


    /** Sets the distance of the current node based on its distance from the source node.
     *
     * The distance value represents the total weight of the
     * shortest path found so far from the source node to the current node.
     *
     * @param distance current distance from source node.
     */
    void setDistance(int distance);


    /** Returns the distance of this node from the source node.
     *
     * @return The distance of this node from the source node.
     */
    int getDistance() const;


    /** Sets the current weight of this node, which represents the weight of the path between this node
     * and the source node in the search generated by DIJKSTRA algorithm. This value is
     * used to calculate the shortest path from the source node to this node.
     *
     * @param weight An integer representing the most recent weight value that was calculated for the
     * shortest path between the source node and this node.
     */
    void setWeight(int weight);


    /** Returns the last found weight of the shortest path between the source node and this node.
     *
     * @return The last found weight of the shortest path between the source node and this node.
     */
    int getWeight() const;


    /** Compares two Node objects for equality based on their names.
     *
     * @param node A shared pointer to a Node object to compare against.
     * @return True if the two Node objects have the same name, false otherwise.
     */
    bool operator==(const std::shared_ptr<Node>& node) const;


    /** Sets the fill color of the circle shape used to render this Node object.
     *
     * @param color The new fill color to use for the circle shape.
     */
    void setColor(const sf::Color& color);


    /** Sets the current state of this Node object.
     *
     * @param state The new state to set for this Node object.
     */
    void setState(NodeState state);


    /** Sets the position of this Node object on the screen.
     *
     * @param pos_x The new x-coordinate of the Node's position.
     * @param pos_y The new y-coordinate of the Node's position.
     */
    void setPosition(float pos_x, float pos_y);


    /** Sets the parent Node of this Node object in a graph search algorithm.
     *
     * @param parent A shared pointer to the Node object that will be set as the parent of this Node.
     */
    void setParent(const std::shared_ptr<Node>& parent);


    /** Gets the parent Node of this Node object in a graph search algorithm.
     *
     * @return A shared pointer to the parent Node of this Node, or nullptr if no parent has been set.
     */
    std::shared_ptr<Node> getParent() const;


    /** Toggles the appearance of the node by adding an outline to the circle shape and reducing
     * the opacity value of its fill color.
     */
    void toggle();


    /** Untoggles the appearance of the node by removing the outline from the circle shape and
     * restoring the opacity value of its fill color.
     */
    void untoggle();


    /** Returns a SFML CircleShape object representing the visual shape of the Node object.
     *
     * @return A SFML CircleShape object representing the visual shape of the Node object.
     */
    sf::CircleShape getShape() const;


    /** Returns the name of the Node object as a string.
     *
     * @return A string value representing the name of the Node object.
     */
    std::string getName() const;


    /** Returns the current state of the Node object.
     *
     * @return A NodeState enum value representing the current state of the Node object.
     */
    NodeState getState() const;


    /** Returns the current position of the Node object as a SFML vector of 2 floats.
     *
     * @return A SFML vector of 2 floats representing the current position of the Node object.
     */
    sf::Vector2f getPosition() const;


    /** Default destructor.
     *
     */
    ~Node() = default;

};



#endif //ALGOVIZ_NODE_H
